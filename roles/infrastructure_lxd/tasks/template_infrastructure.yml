---






- name: Check if tpl LXD networks already exists
  uri:
    url: "https://127.0.0.1:8443/1.0/networks/tplbr{{ hostvars[item]['tpl_num'] }}"
    method: GET
    status_code: 404,200
    headers:
      Accept: "application/json"
    validate_certs: False
    client_cert: "{{ role_path }}/files/lxd.cert"
    client_key: "{{ role_path }}/files/lxd.key"
  register: lxd_network_check_j
  with_items:
    - "{{groups['tpl_containers']}}"

- debug:
    msg: "{{ lxd_network_check_j }}"



# SYNC operation success: status_code=200, follow redirects
# Network post returns 201 when network newly created, 400 when already exists
- name: Create tpl lxd networks
  when: item.0.status == 404
  uri:
    url: "https://127.0.0.1:8443/1.0/networks"
    method: POST
    status_code: 201
    body:
      name: "tplbr{{ hostvars[item.1]['tpl_num'] }}"
      description: "Network of CTF tpl {{ hostvars[item.1]['tpl_num'] }}"
      config:
        ipv6.address: "none"
        ipv4.address: "10.30.{{ hostvars[item.1]['tpl_num'] }}.254/24"
        ipv4.nat: "{{ lxd_auto_nat }}"
        ipv4.firewall: "{{ lxd_auto_firewall }}"
    body_format: json
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    validate_certs: False
    client_cert: "{{ role_path }}/files/lxd.cert"
    client_key: "{{ role_path }}/files/lxd.key"
  register: result_nw_create_j
  with_together:
    - "{{ lxd_network_check_j.results }}"
    - "{{groups['tpl_containers']}}"

- debug:
    msg: "{{ result_nw_create_j.results }}"



# FIXME check for existing containers before creatiion

- name: Creating LXD Containers (tpl)
  uri:
    url: "https://127.0.0.1:8443/1.0/containers"
    method: POST
    status_code: 202
    body:
      name: tpl{{ hostvars[item]['tpl_num'] }}
      devices:
        default:
          name: eth0
          nictype: bridged
          parent: "tplbr{{ hostvars[item]['tpl_num'] }}"
          type: nic
      source:
        type: image
        protocol: simplestreams
        architecture: x86_64
        profiles:
          - default
        persistent: "true"
        server: https://cloud-images.ubuntu.com/releases
        alias: "disco"
      config:
        limits.cpu: "2"
        limits.memory: 2048MB
        user.network-config: |
          version: 1
          config:
            - type: physical
              name: eth0
              subnets:
                - type: static
                  ipv4: true
                  address: 10.30.{{ hostvars[item]['tpl_num'] }}.1
                  netmask: 255.255.255.0
                  gateway: 10.30.{{ hostvars[item]['tpl_num'] }}.254
                  control: auto
            - type: nameserver
              address: 10.30.{{ hostvars[item]['tpl_num'] }}.254
        user.user-data: |
          #cloud-config
          # Apply updates using apt
          package_upgrade: false
          # Set hostname
          hostname: tpl{{ hostvars[item]['tpl_num'] }}
          fqdn: tpl{{ hostvars[item]['tpl_num'] }}.ctf.hs-albsig.de
          manage_etc_hosts: true
          ssh_authorized_keys:
            - {{ lookup('file', playbook_dir+'/sshkey/id_rsa_ctf.pub') }}
    body_format: json
    return_content: True
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    validate_certs: False
    client_cert: "{{ role_path }}/files/lxd.cert"
    client_key: "{{ role_path }}/files/lxd.key"
  register: result_create_containers_j
  with_items:
    - "{{groups['tpl_containers']}}"
- debug:
    msg: "{{ result_create_containers_j.results }}"
# Wait for Async to finish status_code=200
- name: Wait Async, Creating LXD Containers (tpl)
  uri:
    url: "https://127.0.0.1:8443{{ item.json.operation }}/wait"
    method: GET
    follow_redirects: all
    status_code: 200
    return_content: True
    timeout: 900
    validate_certs: False
    client_cert: "{{ role_path }}/files/lxd.cert"
    client_key: "{{ role_path }}/files/lxd.key"
  register: waiting_j
  with_items: "{{ result_create_containers_j.results }}"

- name: Waiting result
  debug:
    msg: "{{ waiting_j.results }}"



# ASYNC operation success: status_code=202 (Accepted), do not follow redirects
- name: Start the tpl containers
  uri:
    url: "https://127.0.0.1:8443/1.0/containers/{{ item }}/state"
    method: PUT
    status_code: 202
    body:
      action: start
      timeout: 120
    body_format: json
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    validate_certs: False
    client_cert: "{{ role_path }}/files/lxd.cert"
    client_key: "{{ role_path }}/files/lxd.key"
  register: lxd_cotainer_state_start_j
  with_items:
    - "{{groups['tpl_containers']}}"
- name:
  debug:
    msg: "{{ lxd_cotainer_state_start_j.results }}"
# Wait for Async to finish status_code=200
- name: Wait Async, Start the tpl container
  uri:
    url: "https://127.0.0.1:8443{{ item.json.operation }}/wait"
    method: GET
    follow_redirects: all
    status_code: 200,404
    return_content: True
    timeout: 120
    validate_certs: False
    client_cert: "{{ role_path }}/files/lxd.cert"
    client_key: "{{ role_path }}/files/lxd.key"
  with_items: "{{ lxd_cotainer_state_start_j.results }}"

- name: publish ad image in lxd
  command: /usr/bin/lxc publish tpl1 --alias tpl_ad_image --force
  become: yes

#- name: publish jeopary image in lxd
#  command: /usr/bin/lxc publish tpl2 --alias tpl_jeop_image --force
#  become: yes